// <auto-generated />
using System;
using MetadataStorage.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MetadataStorage.Infrastructure.Migrations
{
    [DbContext(typeof(MetadataDbContext))]
    partial class MetadataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityName");

                    b.HasIndex("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EntityMetadataDetails");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataFieldValues", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("FieldId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TenantId");

                    b.ToTable("EntityMetadataFieldValues");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataSchema", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectId", "SchemaId");

                    b.HasIndex("SchemaId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EntityMetadataSchemas");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("PublicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldName");

                    b.HasIndex("Id");

                    b.HasIndex("PublicName");

                    b.HasIndex("TenantId");

                    b.ToTable("MetadataFields");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataSchemaDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchemaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Id");

                    b.HasIndex("SchemaName");

                    b.HasIndex("TenantId");

                    b.ToTable("MetadataSchemaDetails");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataSchemaFields", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchemaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FieldId", "SchemaId");

                    b.HasIndex("FieldId");

                    b.HasIndex("SchemaId");

                    b.ToTable("MetadataSchemaFields");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataFieldValues", b =>
                {
                    b.HasOne("MetadataStorage.Infrastructure.Model.EntityMetadataDetails", "MetadataEntity")
                        .WithMany("EntityMetadataFieldValues")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetadataStorage.Infrastructure.Model.MetadataField", "MetadataField")
                        .WithMany("EntityMetadataFieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataEntity");

                    b.Navigation("MetadataField");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataSchema", b =>
                {
                    b.HasOne("MetadataStorage.Infrastructure.Model.MetadataSchemaDetails", "MetadataSchemaDetails")
                        .WithMany("EntityMetadataSchemas")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataSchemaDetails");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataSchemaDetails", b =>
                {
                    b.HasOne("MetadataStorage.Infrastructure.Model.EntityMetadataDetails", "MetadataEntity")
                        .WithMany("MetadataSchemaDetails")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataEntity");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataSchemaFields", b =>
                {
                    b.HasOne("MetadataStorage.Infrastructure.Model.MetadataField", "MetadataField")
                        .WithMany("MetadataSchemaFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetadataStorage.Infrastructure.Model.MetadataSchemaDetails", "MetadataSchemaDetails")
                        .WithMany("MetadataSchemaFields")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataField");

                    b.Navigation("MetadataSchemaDetails");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.EntityMetadataDetails", b =>
                {
                    b.Navigation("EntityMetadataFieldValues");

                    b.Navigation("MetadataSchemaDetails");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataField", b =>
                {
                    b.Navigation("EntityMetadataFieldValues");

                    b.Navigation("MetadataSchemaFields");
                });

            modelBuilder.Entity("MetadataStorage.Infrastructure.Model.MetadataSchemaDetails", b =>
                {
                    b.Navigation("EntityMetadataSchemas");

                    b.Navigation("MetadataSchemaFields");
                });
#pragma warning restore 612, 618
        }
    }
}
